Mandatory Part:
1. Part 1: K3s and Vagrant
    * Vagrant configuration to set up two virtual machines: "wilS" (K3s controller) and "wilSW" (K3s agent)
    * Installation of K3s and kubectl on both VMs
2. Part 2: K3s and three simple applications
    * Deployment and Service definitions for the three applications (app1, app2, app3)
    * Ingress configuration to route traffic based on the HOST header
3. Part 3: K3d and Argo CD
    * Installation script for Docker, K3d, and Argo CD
    * Argo CD application manifest to deploy the application from a GitHub repository
    * Application deployment manifest (deployment.yaml)
Bonus Part:
* Integration of GitLab with the K3d cluster
    * GitLab Helm chart values configuration
    * Installation of GitLab using Helm
    * Update to the Argo CD application manifest to use the GitLab repository

########################################################################################################################

Part 1: K3s and Vagrant

Vagrantfile:
```ruby
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"

  config.vm.define "wilS" do |control|
    control.vm.hostname = "wilS"
    control.vm.network "private_network", ip: "192.168.50.10"
    control.vm.provider "virtualbox" do |vb|
      vb.name = "wilS"
      vb.memory = 1024
      vb.cpus = 1
    end
    control.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apt-transport-https curl
      curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644 --node-taint CriticalAddonsOnly=true:NoExecute --embed-certs
      apt-get install -y kubectl
    SHELL
  end

  config.vm.define "wilSW" do |worker|
    worker.vm.hostname = "wilSW"
    worker.vm.network "private_network", ip: "192.168.50.11"
    worker.vm.provider "virtualbox" do |vb|
      vb.name = "wilSW"
      vb.memory = 1024
      vb.cpus = 1
    end
    worker.vm.provision "shell", inline: <<-SHELL
      apt-get update
      apt-get install -y apt-transport-https curl
      curl -sfL https://get.k3s.io | K3S_URL="https://192.168.50.10:6443" K3S_TOKEN=$(ssh wilS sudo cat /var/lib/rancher/k3s/server/node-token) sh -
      apt-get install -y kubectl
    SHELL
  end
end
```

Part 2: K3s and three simple applications

Ingress configuration (ingress.yaml):
```yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: simple-apps-ingress
spec:
  rules:
  - host: app1.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app1
            port: 
              number: 8080
  - host: app2.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app2
            port:
              number: 8080
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: app3
            port:
              number: 8080
```

Deployments and Services (app1.yaml, app2.yaml, app3.yaml):
```yaml
# app1.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app1
  template:
    metadata:
      labels:
        app: app1
    spec:
      containers:
      - name: app1
        image: wil42/playground:v1
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app1
spec:
  selector:
    app: app1
  ports:
  - port: 8080
    targetPort: 8080

# app2.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app2
spec:
  replicas: 3
  selector:
    matchLabels:
      app: app2
  template:
    metadata:
      labels:
        app: app2
    spec:
      containers:
      - name: app2
        image: wil42/playground:v1
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app2
spec:
  selector:
    app: app2
  ports:
  - port: 8080
    targetPort: 8080

# app3.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app3
  template:
    metadata:
      labels:
        app: app3
    spec:
      containers:
      - name: app3
        image: wil42/playground:v1
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: app3
spec:
  selector:
    app: app3
  ports:
  - port: 8080
    targetPort: 8080
```

Part 3: K3d and Argo CD

Install script (install.sh):
```bash
#!/bin/bash

# Install Docker
apt-get update
apt-get install -y docker.io

# Install K3d
curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash

# Create K3d cluster
k3d cluster create my-cluster

# Install Argo CD
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

# Create dev namespace
kubectl create namespace dev
```

ArgoCD application manifest (argocd-app.yaml):
```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: app-dev
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/your-username/your-repo.git
    targetRevision: HEAD
    path: .
  destination:
    server: https://kubernetes.default.svc
    namespace: dev
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
```

Application deployment manifest (deployment.yaml):
```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
      - name: app
        image: wil42/playground:v1
        ports:
        - containerPort: 8888
```

Bonus part: GitLab integration

GitLab Helm chart values (gitlab-values.yaml):
```yaml
global:
  hosts:
    domain: gitlab.example.com
    https: true
  ingress:
    class: nginx
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
gitlab:
  gitlab-runner:
    install: true
  gitaly:
    enabled: true
```

GitLab Helm chart installation:
```bash
helm repo add gitlab https://charts.gitlab.io
helm install gitlab gitlab/gitlab -f gitlab-values.yaml --namespace gitlab
```

Update the ArgoCD application manifest to use the GitLab repository:
```yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: app-dev
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://gitlab.example.com/your-username/your-repo.git
    targetRevision: HEAD
    path: .
  destination:
    server: https://kubernetes.default.svc
    namespace: dev
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
```
